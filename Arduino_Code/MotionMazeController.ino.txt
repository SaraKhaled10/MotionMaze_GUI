#include <Wire.h>
#include <SoftwareSerial.h>
#include <MPU6050.h>
#include <Servo.h>
#include <Arduino.h>

// Pin setup
#define MOTION_SENSOR_PIN 2
#define BUTTON_PIN        12
#define RED_LED_PIN       6
#define GREEN_LED_PIN     9
#define BLUE_LED_PIN      8
#define BUZZER_PIN        4
#define SERVO_PIN         7
#define ZIGBEE_RX_PIN     11
#define ZIGBEE_TX_PIN     10

// ZigBee communication
SoftwareSerial zigbeeSerial(ZIGBEE_RX_PIN, ZIGBEE_TX_PIN);

// Accelerometer
MPU6050 accelerometer;

// Servo motor
Servo barrierServo;

// Game states
#define STATE_IDLE       0
#define STATE_PLAYING    1
#define STATE_COLLISION  2
#define STATE_POWER_UP   3
#define STATE_GAME_OVER  4
#define STATE_SPECIAL_1  5
#define STATE_SPECIAL_2  6
#define STATE_RESET      7

int gameState = STATE_IDLE;

// LED blink control
unsigned long ledBlinkInterval = 0;
bool ledState = false;

// Pause/resume control
bool isPaused = false;
bool buttonPressed = false;
unsigned long lastButtonCheck = 0;

// Motion and servo timing
bool motionDetected = false;
int servoPosition = 90;
int servoDirection = 1;
unsigned long lastMotionCheck = 0;
unsigned long lastServoUpdate = 0;

// Accelerometer timing
unsigned long lastDataSent = 0;

// Set RGB LED color
void setLedColor(uint8_t r, uint8_t g, uint8_t b) {
  analogWrite(RED_LED_PIN,   r);
  analogWrite(GREEN_LED_PIN, g);
  analogWrite(BLUE_LED_PIN,  b);
}

// Send message when motion is detected
void sendMotionDetected() {
  zigbeeSerial.println("MOTION");
  Serial.println("MOTION");
}

// Send accelerometer values (AX, AY, AZ)
void sendAccelerometerData() {
  int16_t ax, ay, az;
  accelerometer.getAcceleration(&ax, &ay, &az);
  String data = "AX:" + String(ax)
              + ",AY:" + String(ay)
              + ",AZ:" + String(az);
  zigbeeSerial.println(data);
  Serial.println(data);
}

// Move servo back and forth
void moveServo() {
  servoPosition += servoDirection * 10;
  if (servoPosition < 20 || servoPosition > 160)
    servoDirection *= -1;
  barrierServo.write(servoPosition);
}

// Servo control hook
void updateServo() {
}

// Handle commands from ZigBee
void processIncomingCommand() {
  String cmd = zigbeeSerial.readStringUntil('\n');
  cmd.trim();
}

// Setup runs once at start
void setup() {
  pinMode(MOTION_SENSOR_PIN, INPUT);
  pinMode(BUTTON_PIN,        INPUT_PULLUP);
  pinMode(RED_LED_PIN,       OUTPUT);
  pinMode(GREEN_LED_PIN,     OUTPUT);
  pinMode(BLUE_LED_PIN,      OUTPUT);
  pinMode(BUZZER_PIN,        OUTPUT);

  Serial.begin(9600);
  zigbeeSerial.begin(9600);

  Wire.begin();
  accelerometer.initialize();

  barrierServo.attach(SERVO_PIN);
  barrierServo.write(servoPosition);

  // Check if accelerometer works
  if (!accelerometer.testConnection()) {
    Serial.println("MPU6050 FAILED");
    setLedColor(255, 0, 0);
    while (1);
  }

  Serial.println("MPU6050 OK");

  // Flash white LED and beep buzzer at startup
  setLedColor(255, 255, 255);
  tone(BUZZER_PIN, 1000, 300);
  delay(500);

  // Start with blue LED
  isPaused = false;
  setLedColor(0, 0, 255);
}

// Loop runs repeatedly
void loop() {
  unsigned long now = millis();

  // Check pause/resume button every 50ms
  if (now - lastButtonCheck >= 50) {
    lastButtonCheck = now;

    // If button is pressed
    if (digitalRead(BUTTON_PIN) == LOW && !buttonPressed) {
      buttonPressed = true;
      isPaused = !isPaused;

      // If paused, turn LED red and send message
      if (isPaused) {
        setLedColor(255, 0, 0);
        zigbeeSerial.println("PAUSE");
        Serial.println("PAUSE");
      }
      // If resumed, turn LED blue and send message
      else {
        setLedColor(0, 0, 255);
        zigbeeSerial.println("RESUME");
        Serial.println("RESUME");
      }
    }
    // If button released
    else if (digitalRead(BUTTON_PIN) == HIGH) {
      buttonPressed = false;
    }
  }

  // If paused, stop all actions
  if (isPaused) {
    return;
  }

  // Check motion every 100ms
  if (now - lastMotionCheck >= 100) {
    lastMotionCheck = now;
    bool curr = digitalRead(MOTION_SENSOR_PIN) == HIGH;
    if (curr != motionDetected) {
      motionDetected = curr;
      if (motionDetected) {
        sendMotionDetected();
        moveServo();
      }
    }
  }

  // Send accelerometer data every 100ms
  if (now - lastDataSent >= 100) {
    lastDataSent = now;
    sendAccelerometerData();
  }

  // Update servo every 50ms
  if (now - lastServoUpdate >= 50) {
    lastServoUpdate = now;
    updateServo();
  }

  // Read incoming ZigBee commands
  while (zigbeeSerial.available()) {
    processIncomingCommand();
  }
}
